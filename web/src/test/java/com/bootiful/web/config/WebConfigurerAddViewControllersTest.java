// ********RoostGPT********
/*
Test generated by RoostGPT for test test-5404 using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=addViewControllers_06c93780eb
ROOST_METHOD_SIG_HASH=addViewControllers_5df98bc371

Scenario 1: Successful ViewController Registration for Login Path

Details:  
  TestName: verifyViewControllerRegistrationForLogin
  Description: This test verifies that a ViewController for the "login" path is successfully registered with the expected view name "views/login".
Execution:
  Arrange: Create a mock ViewControllerRegistry object.
  Act: Call the addViewControllers method with the mocked ViewControllerRegistry.
  Assert: Verify that the "login" path is registered with the view name "views/login" on the mock ViewControllerRegistry.
Validation: 
  The assertion confirms that the "login" path is associated with the correct view name in the registry. This is significant because it ensures that the application will display the correct login view when the "login" path is accessed.

Scenario 2: Successful ViewController Registration for Root Path

Details:  
  TestName: verifyViewControllerRegistrationForRoot
  Description: This test checks that a ViewController for the root path "/" is correctly registered with the view name "views/index".
Execution:
  Arrange: Create a mock ViewControllerRegistry object.
  Act: Call the addViewControllers method with the mocked ViewControllerRegistry.
  Assert: Verify that the root path "/" is registered with the view name "views/index" on the mock ViewControllerRegistry.
Validation: 
  The assertion validates that the root path is linked to the correct view name in the registry. This test is crucial as it confirms that users are directed to the index view when they access the root URL of the application.

Scenario 3: Verify ViewControllerRegistry Calls

Details:  
  TestName: verifyRegistryAddViewControllerMethodCalls
  Description: This test ensures that the addViewController method of the ViewControllerRegistry is called the correct number of times with the appropriate arguments.
Execution:
  Arrange: Create a mock ViewControllerRegistry object and track the number of times addViewController is called.
  Act: Call the addViewControllers method with the mocked ViewControllerRegistry.
  Assert: Verify that the addViewController method was called exactly twice with the arguments "login" and "/".
Validation: 
  The assertion checks that the registry's method is invoked the expected number of times, ensuring that no additional view controllers are mistakenly registered and that all the intended ones are registered.

Scenario 4: Confirm No Additional ViewControllers Registered

Details:  
  TestName: ensureNoAdditionalViewControllersRegistered
  Description: This test confirms that no additional ViewControllers are registered besides the ones specified in the addViewControllers method.
Execution:
  Arrange: Create a mock ViewControllerRegistry object and track all invocations of addViewController.
  Act: Call the addViewControllers method with the mocked ViewControllerRegistry.
  Assert: Verify that only the specified paths "login" and "/" have been registered and no others.
Validation: 
  This assertion ensures that the application's routing is precise and does not contain unexpected view controller registrations, which could lead to incorrect views being shown for certain paths.

Scenario 5: Handle Null ViewControllerRegistry

Details:  
  TestName: handleNullViewControllerRegistry
  Description: This test checks the behavior of the addViewControllers method when provided with a null ViewControllerRegistry.
Execution:
  Arrange: Pass a null ViewControllerRegistry object to the method.
  Act: Call the addViewControllers method with the null object.
  Assert: Expect an exception to be thrown or a specific error handling behavior to occur.
Validation: 
  This assertion ensures that the method handles null inputs gracefully, either by failing fast with a clear exception or by invoking a defined error handling procedure. It is essential for preventing null pointer exceptions in the application's configuration phase.
*/

// ********RoostGPT********
package com.bootiful.web.config;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import static org.mockito.Mockito.*;
import net.kaczmarzyk.spring.data.jpa.web.SpecificationArgumentResolver;
import nz.net.ultraq.thymeleaf.LayoutDialect;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.format.FormatterRegistry;
import org.springframework.web.context.request.RequestContextListener;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.i18n.SessionLocaleResolver;
import java.util.List;
import java.util.Locale;

class WebConfigurerAddViewControllersTest {
    private ViewControllerRegistry registry;
    private WebConfigurer webConfigurer;
    
    @BeforeEach
    void setUp() {
        registry = Mockito.mock(ViewControllerRegistry.class);
        webConfigurer = new WebConfigurer();
    }
    
    @Test
    void verifyViewControllerRegistrationForLogin() {
        webConfigurer.addViewControllers(registry);
        verify(registry).addViewController("/login").setViewName("views/login");
    }
    
    @Test
    void verifyViewControllerRegistrationForRoot() {
        webConfigurer.addViewControllers(registry);
        verify(registry).addViewController("/").setViewName("views/index");
    }
    
    @Test
    void verifyRegistryAddViewControllerMethodCalls() {
        webConfigurer.addViewControllers(registry);
        verify(registry, times(1)).addViewController("/login");
        verify(registry, times(1)).addViewController("/");
        verifyNoMoreInteractions(registry);
    }
    
    @Test
    void ensureNoAdditionalViewControllersRegistered() {
        webConfigurer.addViewControllers(registry);
        verify(registry).addViewController("/login");
        verify(registry).addViewController("/");
        verifyNoMoreInteractions(registry);
    }
    
    @Test
    void handleNullViewControllerRegistry() {
        ViewControllerRegistry nullRegistry = null;
        // Handling the expected exception for a null registry
        // Since the code does not handle a null registry, a NullPointerException is expected
        assertThrows(NullPointerException.class, () -> webConfigurer.addViewControllers(nullRegistry));
    }
}
