// ********RoostGPT********
/*
Test generated by RoostGPT for test test-5404 using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=onApplicationEvent_02421ea3af
ROOST_METHOD_SIG_HASH=onApplicationEvent_bac9b50cb9

Scenario 1: Successful authentication with WebAuthenticationDetails
Details:
  TestName: testOnApplicationEventWithWebAuthDetails
  Description: This test verifies that when an AuthenticationSuccessEvent is received with WebAuthenticationDetails, the user's last login details and time are updated correctly, and the user is set in the HttpSession.
Execution:
  Arrange: Mock the UserRepository to return a User object when findByUsername is called. Mock the HttpSession to set attributes. Create an instance of AuthenticationSuccessEvent with a UserDetails object and WebAuthenticationDetails.
  Act: Call the onApplicationEvent method with the mocked event.
  Assert: Verify that the correct user attributes are updated and that the user is set in the HttpSession with the CURRENT_USER key.
Validation:
  The assertion aims to verify that the user's lastLoginDetails include the IP and SessionID from the WebAuthenticationDetails, that the lastLoginTime is set to the current date, and that the loginFailuresCount is reset to 0. This test is significant as it ensures successful authentication updates the user's session and persists the new state.

Scenario 2: Successful authentication without WebAuthenticationDetails
Details:
  TestName: testOnApplicationEventWithoutWebAuthDetails
  Description: This test checks the behavior when an AuthenticationSuccessEvent is received without WebAuthenticationDetails, ensuring that the user's last login details are set to a string representation of the details object.
Execution:
  Arrange: Mock the UserRepository and HttpSession as in Scenario 1. Create an AuthenticationSuccessEvent with a UserDetails object and a generic details object.
  Act: Invoke the onApplicationEvent method with this event.
  Assert: Verify that the user's lastLoginDetails are updated to the details.toString() value.
Validation:
  The assertion checks that the lastLoginDetails are correctly set when the details are not an instance of WebAuthenticationDetails. This test is crucial for handling cases where the authentication details might come from a different source than a web authentication.

Scenario 3: Authentication event with null user
Details:
  TestName: testOnApplicationEventWithNullUser
  Description: This test ensures that when an AuthenticationSuccessEvent is received for a username that does not exist in the database, no updates or HttpSession changes are made.
Execution:
  Arrange: Mock the UserRepository to return null when findByUsername is called. Create an AuthenticationSuccessEvent with a UserDetails object.
  Act: Call the onApplicationEvent method with this event.
  Assert: Verify that the HttpSession is not modified and the userRepository.save method is not called.
Validation:
  The assertion confirms that the method handles a non-existent user correctly by not attempting to update or save a null user and not setting any session attributes. This test is important to prevent null pointer exceptions and ensure that only valid users are processed.

Scenario 4: Authentication event with null authentication details
Details:
  TestName: testOnApplicationEventWithNullAuthDetails
  Description: This test checks that when an AuthenticationSuccessEvent is received with null authentication details, the user's lastLoginDetails remain null.
Execution:
  Arrange: Mock the UserRepository and HttpSession as in Scenario 1. Create an AuthenticationSuccessEvent with a UserDetails object and null details.
  Act: Invoke the onApplicationEvent method with this event.
  Assert: Verify that the user's lastLoginDetails remain null.
Validation:
  The assertion verifies that the method correctly handles null authentication details by not setting lastLoginDetails. This test is essential to ensure that the method is robust against incomplete authentication events.

Scenario 5: Authentication event with non-UserDetails principal
Details:
  TestName: testOnApplicationEventWithNonUserDetailsPrincipal
  Description: This test checks that the method handles a case where the AuthenticationSuccessEvent contains a principal that is not an instance of UserDetails.
Execution:
  Arrange: Create an AuthenticationSuccessEvent with a principal object that is not an instance of UserDetails. The UserRepository and HttpSession need not be mocked since they should not be used.
  Act: Call the onApplicationEvent method with this event.
  Assert: Catch any potential ClassCastException and verify that no other actions are taken.
Validation:
  The assertion ensures that the method does not throw a ClassCastException and does not interact with the UserRepository or HttpSession when the principal is not an instance of UserDetails. This test is significant for ensuring the method's type safety and robustness.
*/

// ********RoostGPT********
package com.bootiful.web.config.security;

import com.bootiful.framework.domain.User;
import com.bootiful.framework.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.event.AuthenticationSuccessEvent;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetails;
import javax.servlet.http.HttpSession;
import java.util.Date;
import static org.mockito.Mockito.*;
import static org.mockito.ArgumentMatchers.any;
import static org.junit.jupiter.api.Assertions.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import static com.bootiful.web.util.SessionKey.CURRENT_USER;

@ExtendWith(MockitoExtension.class)
public class AuthSuccessListenerOnApplicationEventTest {
    @Mock
    private UserRepository userRepository;
    @Mock
    private HttpSession httpSession;
    @InjectMocks
    private AuthSuccessListener authSuccessListener;
    private UserDetails userDetails;
    private User user;
    @BeforeEach
    public void setup() {
        userDetails = new org.springframework.security.core.userdetails.User("testUser", "password", AuthorityUtils.createAuthorityList("ROLE_USER"));
        user = new User();
        user.setUsername("testUser");
        user.setLastLoginTime(new Date());
    }
    @Test
    public void testOnApplicationEventWithWebAuthDetails() {
        WebAuthenticationDetails webAuthenticationDetails = mock(WebAuthenticationDetails.class);
        when(webAuthenticationDetails.getRemoteAddress()).thenReturn("127.0.0.1");
        when(webAuthenticationDetails.getSessionId()).thenReturn("sessionId");
        AuthenticationSuccessEvent event = new AuthenticationSuccessEvent(new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities(), webAuthenticationDetails));
        when(userRepository.findByUsername("testUser")).thenReturn(user);
        authSuccessListener.onApplicationEvent(event);
        verify(httpSession).setAttribute(eq(CURRENT_USER), eq(user));
        assertNotNull(user.getLastLoginDetails());
        assertTrue(user.getLastLoginDetails().contains("IP: 127.0.0.1"));
        assertTrue(user.getLastLoginDetails().contains("SessionID: sessionId"));
        assertEquals(0, user.getLoginFailuresCount());
        verify(userRepository).save(user);
    }
    @Test
    public void testOnApplicationEventWithoutWebAuthDetails() {
        AuthenticationSuccessEvent event = new AuthenticationSuccessEvent(new UsernamePasswordAuthenticationToken(userDetails, null));
        when(userRepository.findByUsername("testUser")).thenReturn(user);
        authSuccessListener.onApplicationEvent(event);
        assertEquals(event.getAuthentication().getDetails().toString(), user.getLastLoginDetails());
        verify(userRepository).save(user);
    }
    @Test
    public void testOnApplicationThisEventWithNullUser() {
        AuthenticationSuccessEvent event = new AuthenticationSuccessEvent(new UsernamePasswordAuthenticationToken(userDetails, null));
        when(userRepository.findByUsername("testUser")).thenReturn(null);
        authSuccessListener.onApplicationEvent(event);
        verify(httpSession, never()).setAttribute(any(), any());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    public void testOnApplicationEventWithNullAuthDetails() {
        AuthenticationSuccessEvent event = new AuthenticationSuccessEvent(new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities()));
        when(userRepository.findByUsername("testUser")).thenReturn(user);
        authSuccessListener.onApplicationEvent(event);
        assertNull(user.getLastLoginDetails());
        verify(userRepository).save(user);
    }
    @Test
    public void testOnApplicationEventWithNonUserDetailsPrincipal() {
        Object principal = new Object();
        AuthenticationSuccessEvent event = new AuthenticationSuccessEvent(new UsernamePasswordAuthenticationToken(principal, null));
        assertDoesNotThrow(() -> authSuccessListener.onApplicationEvent(event));
        verify(userRepository, never()).findByUsername(anyString());
        verify(httpSession, never()).setAttribute(any(), any());
    }
}
