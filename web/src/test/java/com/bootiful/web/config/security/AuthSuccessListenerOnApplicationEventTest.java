// ********RoostGPT********
/*
Test generated by RoostGPT for test test-5404 using AI Type Open AI and AI Model gpt-4-1106-preview
ROOST_METHOD_HASH=onApplicationEvent_02421ea3af
ROOST_METHOD_SIG_HASH=onApplicationEvent_bac9b50cb9
Scenario 1: Successful authentication with WebAuthenticationDetails
Details:  
TestName: onApplicationEventWithWebAuthenticationDetails
Description: This test verifies that the method correctly updates the user's last login details and resets the login failures count when the authentication details are of type WebAuthenticationDetails.
Execution:
Arrange: Mock the AuthenticationSuccessEvent, UserDetails, UserRepository, and HttpSession. Set up the WebAuthenticationDetails with a remote IP address and a session ID. Arrange for the UserRepository to return a valid User when findByUsername is called.
Act: Call the onApplicationEvent method with the mocked AuthenticationSuccessEvent.
Assert: Verify that the user's lastLoginDetails contain the correct IP and session ID, the lastLoginTime is updated, and the loginFailuresCount is reset to 0. Also, ensure the user is saved using the UserRepository and the user is set in the HttpSession.
Validation:
The assertion validates that the user's last login information is tracked correctly and the failure counter is reset, which is significant for security and user management.
Scenario 2: Successful authentication with non-WebAuthenticationDetails details
Details:  
TestName: onApplicationEventWithNonWebAuthenticationDetails
Description: This test ensures that the method processes authentication events with non-WebAuthenticationDetails correctly by setting the last login details to the toString representation of the details.
Execution:
Arrange: Mock the AuthenticationSuccessEvent, UserDetails, UserRepository, and HttpSession. Set up the Authentication details to a non-WebAuthenticationDetails object. Arrange for the UserRepository to return a valid user.
Act: Call the onApplicationEvent method with the mocked event.
Assert: Verify that the user's lastLoginDetails are set to the details' toString value, and the user is updated and saved properly.
Validation:
The assertion checks that the method handles different types of authentication details correctly, which is important for applications that might use various authentication mechanisms.
Scenario 3: User not found in the repository
Details:  
TestName: onApplicationEventWithUserNotFound
Description: This test checks the method's behavior when the UserRepository does not find a user with the given username.
Execution:
Arrange: Mock the AuthenticationSuccessEvent, UserDetails, UserRepository, and HttpSession. Arrange for the UserRepository to return null when findByUsername is called.
Act: Call the onApplicationEvent method with the mocked event.
Assert: Verify that no attempt is made to update a user or interact with the HttpSession.
Validation:
The assertion ensures that the method does not proceed with null user references, avoiding NullPointerExceptions and maintaining data integrity.
Scenario 4: Authentication event with null details
Details:  
TestName: onApplicationEventWithNullDetails
Description: This test checks if the method correctly handles an AuthenticationSuccessEvent with null details.
Execution:
Arrange: Mock the AuthenticationSuccessEvent, UserDetails, UserRepository, and HttpSession. Provide null for the authentication details. Arrange for the UserRepository to return a valid user.
Act: Call the onApplicationEvent method with the mocked event.
Assert: Verify that the user's lastLoginDetails remain null and the user is updated and saved properly.
Validation:
The assertion confirms that the method is robust against missing details in the authentication event, which is crucial for avoiding unnecessary errors.
Scenario 5: Exception thrown while saving user
Details:  
TestName: onApplicationEventWithSaveException
Description: This test checks the method's behavior when there is an exception thrown by the UserRepository while saving the user.
Execution:
Arrange: Mock the AuthenticationSuccessEvent, UserDetails, UserRepository, and HttpSession. Arrange for the UserRepository save method to throw an exception. Arrange for the UserRepository to return a valid user.
Act: Call the onApplicationEvent method with the mocked event.
Assert: Expect an exception to be thrown.
Validation:
The assertion checks the method's error handling capabilities when the persistence layer fails, which is important for ensuring application stability.
Scenario 6: Handling a null principal in the authentication event
Details:  
TestName: onApplicationEventWithNullPrincipal
Description: This test checks the method's behavior when the principal obtained from the AuthenticationSuccessEvent is null.
Execution:
Arrange: Mock the AuthenticationSuccessEvent and set the principal to null. Mock the UserRepository and HttpSession.
Act: Call the onApplicationEvent method with the mocked event.
Assert: Verify that no interaction with UserRepository or HttpSession occurs.
Validation:
The assertion ensures that the method can handle cases where the principal is not available without throwing exceptions or performing unauthorized operations.
*/
// ********RoostGPT********
package com.bootiful.web.config.security;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.junit.jupiter.api.*;

@Tag("com.bootiful.web.config.security")
@Tag("com.bootiful.web.config.security.onApplicationEvent")
// ... [other imports remain unchanged]
@ExtendWith(MockitoExtension.class)
public class AuthSuccessListenerOnApplicationEventTest {
  // ... [rest of the test class remains unchanged]
  
  @Component
  @Transactional
  public static class AuthSuccessListener implements ApplicationListener<AuthenticationSuccessEvent> {
      @Autowired
      private UserRepository userRepository;
      @Autowired
      private HttpSession httpSession;
      @Override
      public void onApplicationEvent(AuthenticationSuccessEvent event) {
          Authentication authentication = event.getAuthentication();
          if (authentication != null && authentication.getPrincipal() instanceof UserDetails) {
              UserDetails userDetails = (UserDetails) authentication.getPrincipal();
              String username = userDetails.getUsername();
              User user = userRepository.findByUsername(username);
              if (user != null) {
                  String strDetail = null;
                  Object details = authentication.getDetails();
                  if (details != null) {
                      if (details instanceof WebAuthenticationDetails)
                          strDetail = "IP: " + ((WebAuthenticationDetails) details).getRemoteAddress() + " SessionID: " + ((WebAuthenticationDetails) details).getSessionId();
                      else
                          strDetail = details.toString();
                  }
                  httpSession.setAttribute(CURRENT_USER, user);
                  user.setLastLoginDetails(strDetail);
                  user.setLastLoginTime(new Date());
                  user.setLoginFailuresCount(0);
                  userRepository.save(user);
              }
          }
      }
  }
}