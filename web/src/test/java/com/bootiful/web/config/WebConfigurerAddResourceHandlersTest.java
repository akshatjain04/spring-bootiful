// ********RoostGPT********
/*
Test generated by RoostGPT for test test-5404 using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=addResourceHandlers_9d4db5f2e2
ROOST_METHOD_SIG_HASH=addResourceHandlers_289a4a6d21

Scenario 1: Resource handler registration for new pattern
Details:
  TestName: addResourceHandlerForNewPattern
  Description: This test checks if a new resource handler is added for the '/dist/**' pattern when there is no existing handler for this pattern.
Execution:
  Arrange: Create a mock ResourceHandlerRegistry object that returns false for hasMappingForPattern("/dist/**").
  Act: Call addResourceHandlers with the mocked ResourceHandlerRegistry.
  Assert: Verify that addResourceHandler with pattern "/dist/**" is called once and that addResourceLocations with "classpath:/static/vendor/" is also called.
Validation:
  Clarify that the assertion aims to verify that the method correctly adds a resource handler when one for the specified pattern does not already exist. This is significant because it ensures that static resources located in 'classpath:/static/vendor/' can be served under the '/dist/**' pattern.

Scenario 2: Resource handler not registered when pattern already exists
Details:
  TestName: doNotAddResourceHandlerIfPatternExists
  Description: This test ensures that the method does not add a new resource handler if one already exists for the '/dist/**' pattern.
Execution:
  Arrange: Create a mock ResourceHandlerRegistry object that returns true for hasMappingForPattern("/dist/**").
  Act: Call addResourceHandlers with the mocked ResourceHandlerRegistry.
  Assert: Verify that addResourceHandler is never called for the "/dist/**" pattern.
Validation:
  Clarify that the assertion aims to confirm that the method does not duplicate resource handlers, preserving the idempotency of the configuration. This is important to prevent conflicts or unexpected behavior in resource handling.

Scenario 3: Resource handler registration with null registry
Details:
  TestName: addResourceHandlerWithNullRegistry
  Description: This test assesses the behavior of the method when a null ResourceHandlerRegistry object is passed.
Execution:
  Arrange: Pass a null ResourceHandlerRegistry object to the addResourceHandlers method.
  Act: Attempt to call addResourceHandlers.
  Assert: Expect an exception to be thrown due to the null argument.
Validation:
  Clarify that the assertion aims to verify the robustness of the method when dealing with null inputs. It is significant to ensure that the method fails gracefully and provides informative feedback for debugging purposes.

Scenario 4: Resource handler registration behavior with multiple patterns
Details:
  TestName: resourceHandlerRegistrationWithMultiplePatterns
  Description: This test ensures that the method only attempts to add a resource handler for the '/dist/**' pattern and not for any other patterns that might exist.
Execution:
  Arrange: Create a mock ResourceHandlerRegistry object with existing mappings for various patterns except "/dist/**".
  Act: Call addResourceHandlers with the mocked ResourceHandlerRegistry.
  Assert: Verify that addResourceHandler is called only for the "/dist/**" pattern and not for any other patterns.
Validation:
  Clarify that the assertion checks that the method is specifically targeting the '/dist/**' pattern and respects the exclusivity of the pattern check. This is crucial to ensure that the method's logic is tightly scoped and does not affect other resource handlers inadvertently.
*/

// ********RoostGPT********
package com.bootiful.web.config;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import net.kaczmarzyk.spring.data.jpa.web.SpecificationArgumentResolver;
import nz.net.ultraq.thymeleaf.LayoutDialect;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.format.FormatterRegistry;
import org.springframework.web.context.request.RequestContextListener;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.i18n.SessionLocaleResolver;
import java.util.List;
import java.util.Locale;

@ExtendWith(MockitoExtension.class)
class WebConfigurerAddResourceHandlersTest {
    private WebConfigurer webConfigurer;
    @Mock
    private ResourceHandlerRegistry resourceHandlerRegistry;
    @BeforeEach
    void setUp() {
        webConfigurer = new WebConfigurer();
    }
    @Test
    void addResourceHandlerForNewPattern() {
        when(resourceHandlerRegistry.hasMappingForPattern("/dist/**")).thenReturn(false);
        webConfigurer.addResourceHandlers(resourceHandlerRegistry);
        verify(resourceHandlerRegistry, times(1)).addResourceHandler("/dist/**");
        verify(resourceHandlerRegistry, times(1)).addResourceLocations("classpath:/static/vendor/");
    }
    @Test
    void doNotAddResourceHandlerIfPatternExists() {
        when(resourceHandlerRegistry.hasMappingForPattern("/dist/**")).thenReturn(true);
        webConfigurer.addResourceHandlers(resourceHandlerRegistry);
        verify(resourceHandlerRegistry, never()).addResourceHandler("/dist/**");
    }
    @Test
    void addResourceHandlerWithNullRegistry() {
        resourceHandlerRegistry = null;
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            webConfigurer.addResourceHandlers(resourceHandlerRegistry);
        });
        assertEquals("ResourceHandlerRegistry must not be null", exception.getMessage());
    }
    @Test
    void resourceHandlerRegistrationWithMultiplePatterns() {
        when(resourceHandlerRegistry.hasMappingForPattern("/dist/**")).thenReturn(false);
        when(resourceHandlerRegistry.hasMappingForPattern("/other-pattern/**")).thenReturn(true);
        webConfigurer.addResourceHandlers(resourceHandlerRegistry);
        verify(resourceHandlerRegistry, times(1)).addResourceHandler("/dist/**");
        verify(resourceHandlerRegistry, never()).addResourceHandler("/other-pattern/**");
    }
}
