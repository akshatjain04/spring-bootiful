// ********RoostGPT********
/*
Test generated by RoostGPT for test test-5404 using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=localeResolver_0838090681
ROOST_METHOD_SIG_HASH=localeResolver_97290f279b

Scenario 1: Ensure default locale is set to Locale.US

Details:
  TestName: defaultLocaleIsSetToLocaleUS
  Description: This test checks whether the localeResolver method sets the default Locale to Locale.US correctly.
  Execution:
    Arrange: N/A (No specific arrangement as the method does not take any parameters and does not depend on external data).
    Act: Invoke the localeResolver method.
    Assert: Assert that the returned LocaleResolver has its default locale set to Locale.US.
  Validation:
    The assertion verifies that the default locale is set as expected according to the method's implementation.
    This is significant as it ensures that the application will fall back to the US locale in the absence of a session-specific locale setting.

Scenario 2: Returned object is of type SessionLocaleResolver

Details:
  TestName: returnedObjectIsSessionLocaleResolver
  Description: This test verifies that the object returned by the localeResolver method is an instance of SessionLocaleResolver.
  Execution:
    Arrange: N/A
    Act: Invoke the localeResolver method.
    Assert: Use the `assertInstanceOf` assertion to check that the returned object is an instance of SessionLocaleResolver.
  Validation:
    The assertion confirms the return type matches the expected type as per the method's contract.
    It is significant as it ensures that the application will be able to use session-based localization, which is a critical feature for user experience in multi-language support.

Scenario 3: Verify that the method returns a non-null LocaleResolver

Details:
  TestName: localeResolverIsNotNull
  Description: This test is to verify that the localeResolver method does not return a null object.
  Execution:
    Arrange: N/A
    Act: Invoke the localeResolver method.
    Assert: Use the assertNotNull assertion to ensure that the returned LocaleResolver object is not null.
  Validation:
    The assertion ensures that the method is implemented correctly and does not return a null, which could cause NullPointerExceptions elsewhere in the application.
    This is important for the stability of the application, as a null return could cause failures in other components that rely on the LocaleResolver.

Scenario 4: Verify that the LocaleResolver retains the default locale setting after multiple invocations

Details:
  TestName: localeResolverRetainsDefaultLocaleAfterMultipleInvocations
  Description: This test ensures that multiple invocations of the localeResolver method continue to return a LocaleResolver with the default locale set to Locale.US.
  Execution:
    Arrange: Invoke the localeResolver method multiple times.
    Act: Store the LocaleResolver returned from each invocation.
    Assert: Assert that each returned LocaleResolver has the default locale set to Locale.US.
  Validation:
    The assertion checks the consistency of the default locale setting across multiple calls to the method.
    This test is significant because it ensures that the default locale setting is not inadvertently changed or affected by successive invocations, which is important for application consistency.
*/

// ********RoostGPT********
package com.bootiful.web.config;

import org.junit.jupiter.api.Test;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.i18n.SessionLocaleResolver;
import java.util.Locale;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import net.kaczmarzyk.spring.data.jpa.web.SpecificationArgumentResolver;
import nz.net.ultraq.thymeleaf.LayoutDialect;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.format.FormatterRegistry;
import org.springframework.web.context.request.RequestContextListener;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import java.util.List;

public class WebConfigurerLocaleResolverTest {
    @Test
    public void defaultLocaleIsSetToLocaleUS() {
        WebConfigurer configurer = new WebConfigurer();
        LocaleResolver localeResolver = configurer.localeResolver();
        assertEquals(Locale.US, ((SessionLocaleResolver) localeResolver).getDefaultLocale());
    }
    @Test
    public void returnedObjectIsSessionLocaleResolver() {
        WebConfigurer configurer = new WebConfigurer();
        LocaleResolver localeResolver = configurer.localeResolver();
        assertTrue(localeResolver instanceof SessionLocaleResolver);
    }
    @Test
    public void localeResolverIsNotNull() {
        WebConfigurer configurer = new WebConfigurer();
        LocaleResolver localeResolver = configurer.localeResolver();
        assertNotNull(localeResolver);
    }
    @Test
    public void localeResolverRetainsDefaultLocaleAfterMultipleInvocations() {
        WebConfigurer configurer = new WebConfigurer();
        LocaleResolver firstInvocationLocaleResolver = configurer.localeResolver();
        LocaleResolver secondInvocationLocaleResolver = configurer.localeResolver();
        assertEquals(Locale.US, ((SessionLocaleResolver) firstInvocationLocaleResolver).getDefaultLocale());
        assertEquals(Locale.US, ((SessionLocaleResolver) secondInvocationLocaleResolver).getDefaultLocale());
    }
}
