// ********RoostGPT********
/*
Test generated by RoostGPT for test test-5404 using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=loadUserByUsername_ce61a0d8fa
ROOST_METHOD_SIG_HASH=loadUserByUsername_7d006b4959

Scenario 1: Successful user authentication

Details:
  TestName: successfulUserAuthentication
  Description: This test verifies that the method loadUserByUsername successfully authenticates a user and returns UserDetails when provided with a valid username.
Execution:
  Arrange: Mock the userRepository to return a User object when findByUsername is called with the given username. Also, mock the Role and set it to the User.
  Act: Call the loadUserByUsername method with a valid username.
  Assert: Assert that the returned UserDetails object is not null and contains the expected authorities based on the user's role.
Validation:
  The assertion checks that the UserDetails object correctly represents the authenticated user, including username, password, and authorities. This test is significant as it confirms the primary happy path for user authentication within the application.

Scenario 2: User not found

Details:
  TestName: userNotFoundThrowsException
  Description: This test ensures that the method loadUserByUsername throws UsernameNotFoundException when no user is found for the given username.
Execution:
  Arrange: Mock the userRepository to return null when findByUsername is called with a non-existent username.
  Act: Attempt to call the loadUserByUsername method with a non-existent username.
  Assert: Expect a UsernameNotFoundException to be thrown.
Validation:
  The assertion validates that the method correctly handles the scenario where a user is not present in the repository by throwing an exception. This is crucial for alerting the calling code that the authentication process cannot proceed due to the absence of the user.

Scenario 3: User with null role

Details:
  TestName: userWithNullRoleThrowsException
  Description: This test checks that the method loadUserByUsername throws UsernameNotFoundException when the found user has a null role.
Execution:
  Arrange: Mock the userRepository to return a User object with a null role when findByUsername is called.
  Act: Attempt to call the loadUserByUsername method with a username linked to a user with a null role.
  Assert: Expect a UsernameNotFoundException to be thrown.
Validation:
  The assertion ensures that the method does not allow a user without a defined role to be authenticated, which is important for maintaining the integrity of role-based access control within the application.

Scenario 4: Username case sensitivity

Details:
  TestName: usernameCaseSensitivityCheck
  Description: This test checks that the method loadUserByUsername is case-insensitive when looking up usernames.
Execution:
  Arrange: Mock the userRepository to return a User object for a lowercase version of the username, even when the method is called with mixed case.
  Act: Call the loadUserByUsername method with a username containing uppercase characters.
  Assert: Assert that the returned UserDetails contains the username in lowercase, as expected after the method processes it.
Validation:
  The assertion verifies that the method correctly normalizes usernames to lowercase before attempting to authenticate, which is important to ensure consistent user identification regardless of the case sensitivity of the username provided.

Scenario 5: User with empty username

Details:
  TestName: emptyUsernameThrowsException
  Description: This test ensures that the method loadUserByUsername throws an IllegalArgumentException or a custom validation exception when called with an empty username.
Execution:
  Arrange: None required, as the userRepository should not be called with an invalid username.
  Act: Attempt to call the loadUserByUsername method with an empty string as the username.
  Assert: Expect an IllegalArgumentException to be thrown.
Validation:
  The assertion checks that the method includes validation for input arguments and rejects empty usernames, which is essential for preventing unnecessary database lookups and maintaining data integrity.
*/

// ********RoostGPT********
package com.bootiful.web.config.security;

import com.bootiful.framework.domain.Role;
import com.bootiful.framework.domain.User;
import com.bootiful.framework.repository.UserRepository;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

@ExtendWith(MockitoExtension.class)
public class UserDetailsServiceLoadUserByUsernameTest {
    @Mock
    private UserRepository userRepository;
    @InjectMocks
    private UserDetailsService userDetailsService;
    @Test
    @DisplayName("Successful user authentication")
    public void successfulUserAuthentication() {
        // Arrange
        String username = "testUser";
        User mockUser = new User();
        mockUser.setUsername(username);
        mockUser.setPassword("password");
        Role mockRole = new Role();
        mockRole.setName("ROLE_USER");
        mockUser.setRoles(Arrays.asList(mockRole)); // Adjust to match User class roles field
        when(userRepository.findByUsername(username.toLowerCase())).thenReturn(mockUser);
        // Act
        UserDetails userDetails = userDetailsService.loadUserByUsername(username);
        // Assert
        assertNotNull(userDetails);
        assertEquals(username.toLowerCase(), userDetails.getUsername());
        assertEquals(mockUser.getPassword(), userDetails.getPassword());
        assertTrue(userDetails.getAuthorities().stream().anyMatch(a -> a.getAuthority().equals(mockRole.getName())));
    }
    @Test
    @DisplayName("User not found throws exception")
    public void userNotFoundThrowsException() {
        // Arrange
        String username = "nonExistentUser";
        when(userRepository.findByUsername(username.toLowerCase())).thenReturn(null);
        // Act & Assert
        assertThrows(UsernameNotFoundException.class, () -> userDetailsService.loadUserByUsername(username));
    }
    @Test
    @DisplayName("User with null role throws exception")
    public void userWithNullRoleThrowsException() {
        // Arrange
        String username = "userWithNoRole";
        User mockUser = new User();
        mockUser.setUsername(username);
        mockUser.setPassword("password");
        mockUser.setRoles(null); // Adjust to match User class roles field
        when(userRepository.findByUsername(username.toLowerCase())).thenReturn(mockUser);
        // Act & Assert
        assertThrows(UsernameNotFoundException.class, () -> userDetailsService.loadUserByUsername(username));
    }
    @Test
    @DisplayName("Username case sensitivity check")
    public void usernameCaseSensitivityCheck() {
        // Arrange
        String username = "TestUser";
        User mockUser = new User();
        mockUser.setUsername(username.toLowerCase());
        mockUser.setPassword("password");
        Role mockRole = new Role();
        mockRole.setName("ROLE_USER");
        mockUser.setRoles(Arrays.asList(mockRole)); // Adjust to match User class roles field
        when(userRepository.findByUsername(username.toLowerCase())).thenReturn(mockUser);
        // Act
        UserDetails userDetails = userDetailsService.loadUserByUsername(username);
        // Assert
        assertEquals(username.toLowerCase(), userDetails.getUsername());
    }
    @Test
    @DisplayName("Empty username throws exception")
    public void emptyUsernameThrowsException() {
        // Arrange
        String username = "";
        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> userDetailsService.loadUserByUsername(username));
    }
}
